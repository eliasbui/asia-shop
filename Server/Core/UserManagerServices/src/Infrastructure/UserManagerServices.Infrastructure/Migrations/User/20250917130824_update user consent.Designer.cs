// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserManagerServices.Infrastructure.Data;

#nullable disable

namespace UserManagerServices.Infrastructure.Migrations.User
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250917130824_update user consent")]
    partial class updateuserconsent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserManagerServices.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSystemRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_Roles");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_roles_created_at");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_roles_is_active");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("idx_roles_is_deleted");

                    b.HasIndex("IsSystemRole")
                        .HasDatabaseName("idx_roles_is_system_role");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("idx_roles_name");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("idx_roles_normalized_name");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.RoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_RoleClaims");

                    b.HasIndex("ClaimType")
                        .HasDatabaseName("idx_role_claims_claim_type");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_role_claims_created_at");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("idx_role_claims_is_deleted");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("idx_role_claims_role_id");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("RoleId", "ClaimType")
                        .HasDatabaseName("idx_role_claims_role_claim_type");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastLoginIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime?>("LastLogoutAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastLogoutIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id")
                        .HasName("PK_Users");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_users_created_at");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_users_email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_users_is_active");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("idx_users_is_deleted");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("idx_users_phone_number");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("idx_users_updated_at");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("idx_users_username");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserActivityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Entity")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_UserActivityLogs");

                    b.HasIndex("Action")
                        .HasDatabaseName("idx_user_activity_logs_action");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_user_activity_logs_created_at");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Entity")
                        .HasDatabaseName("idx_user_activity_logs_entity");

                    b.HasIndex("EntityId")
                        .HasDatabaseName("idx_user_activity_logs_entity_id");

                    b.HasIndex("IpAddress")
                        .HasDatabaseName("idx_user_activity_logs_ip_address");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("idx_user_activity_logs_is_deleted");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("idx_user_activity_logs_timestamp");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_activity_logs_user_id");

                    b.HasIndex("UserId", "Action", "Timestamp")
                        .HasDatabaseName("idx_user_activity_logs_user_action_time");

                    b.ToTable("UserActivityLogs", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string[]>("IpBlacklist")
                        .HasColumnType("jsonb");

                    b.Property<string>("IpWhitelist")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("KeyValue")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("RequestCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("RequestLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1000);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_UserApiKeys");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_user_api_keys_created_at");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("idx_user_api_keys_expires_at");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_user_api_keys_is_active");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("idx_user_api_keys_is_deleted");

                    b.HasIndex("KeyName")
                        .HasDatabaseName("idx_user_api_keys_key_name");

                    b.HasIndex("KeyValue")
                        .IsUnique()
                        .HasDatabaseName("idx_user_api_keys_key_value");

                    b.HasIndex("LastUsedAt")
                        .HasDatabaseName("idx_user_api_keys_last_used_at");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_api_keys_user_id");

                    b.HasIndex("UserId", "KeyName")
                        .IsUnique()
                        .HasDatabaseName("idx_user_api_keys_user_name");

                    b.ToTable("UserApiKeys", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_UserClaims");

                    b.HasIndex("ClaimType")
                        .HasDatabaseName("idx_user_claims_claim_type");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_user_claims_created_at");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("idx_user_claims_is_deleted");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_claims_user_id");

                    b.HasIndex("UserId", "ClaimType")
                        .HasDatabaseName("idx_user_claims_user_claim_type");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserConsent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ConsentGivenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConsentIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("ConsentLanguage")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("ConsentMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ConsentProof")
                        .HasColumnType("jsonb");

                    b.Property<string>("ConsentSource")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ConsentType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ConsentUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConsentUserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ConsentVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("1.0");

                    b.Property<DateTime?>("ConsentWithdrawnAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DataCategories")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InformationProvided")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsWithdrawable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LegalBasis")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("ParentConsentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProcessingActivities")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("RetentionPeriod")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ThirdParties")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WasInformed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("WithdrawalIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<int?>("WithdrawalMethod")
                        .HasColumnType("integer");

                    b.Property<string>("WithdrawalReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("WithdrawalUserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id")
                        .HasName("PK_UserConsents");

                    b.HasIndex("ConsentGivenAt")
                        .HasDatabaseName("IX_UserConsents_ConsentGivenAt");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_UserConsents_ExpiresAt")
                        .HasFilter("\"ExpiresAt\" IS NOT NULL");

                    b.HasIndex("ParentConsentId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_UserConsents_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserConsents_UserId");

                    b.HasIndex("UserId", "ConsentType")
                        .HasDatabaseName("IX_UserConsents_UserId_ConsentType");

                    b.ToTable("UserConsents", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserEmailOtp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("BlockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("MaxAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3);

                    b.Property<string>("OtpHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsedFromIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("UsedFromUserAgent")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_UserEmailOtps");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmailAddress")
                        .HasDatabaseName("idx_user_email_otps_email_address");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("idx_user_email_otps_expires_at");

                    b.HasIndex("IsBlocked")
                        .HasDatabaseName("idx_user_email_otps_is_blocked");

                    b.HasIndex("IsUsed")
                        .HasDatabaseName("idx_user_email_otps_is_used");

                    b.HasIndex("Purpose")
                        .HasDatabaseName("idx_user_email_otps_purpose");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("idx_user_email_otps_session_id");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_email_otps_user_id");

                    b.HasIndex("ExpiresAt", "IsUsed")
                        .HasDatabaseName("idx_user_email_otps_expires_used");

                    b.HasIndex("UserId", "Purpose", "IsUsed")
                        .HasDatabaseName("idx_user_email_otps_user_purpose_used");

                    b.ToTable("UserEmailOtps", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserLockoutHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Details")
                        .HasColumnType("jsonb");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("FailedAttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsManualLockout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("LockedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LockoutLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("LockoutReason")
                        .HasColumnType("int");

                    b.Property<DateTime>("LockoutStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LockoutType")
                        .HasColumnType("int");

                    b.Property<int?>("ReleaseReason")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReleasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReleasedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("TriggeringIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_UserLockoutHistory");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UserLockoutHistory_IsActive");

                    b.HasIndex("LockoutEnd")
                        .HasDatabaseName("IX_UserLockoutHistory_LockoutEnd");

                    b.HasIndex("LockoutReason")
                        .HasDatabaseName("IX_UserLockoutHistory_LockoutReason");

                    b.HasIndex("LockoutStart")
                        .HasDatabaseName("IX_UserLockoutHistory_LockoutStart");

                    b.HasIndex("LockoutType")
                        .HasDatabaseName("IX_UserLockoutHistory_LockoutType");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserLockoutHistory_UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId", "IsActive")
                        .HasDatabaseName("IX_UserLockoutHistory_UserId_IsActive");

                    b.HasIndex("UserId", "LockoutStart")
                        .HasDatabaseName("IX_UserLockoutHistory_UserId_LockoutStart");

                    b.ToTable("UserLockoutHistory", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_UserLogins");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_user_logins_created_at");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("idx_user_logins_is_deleted");

                    b.HasIndex("LoginProvider")
                        .HasDatabaseName("idx_user_logins_provider");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_logins_user_id");

                    b.HasIndex("LoginProvider", "ProviderKey")
                        .IsUnique()
                        .HasDatabaseName("idx_user_logins_provider_key");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserLoginAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("AttemptedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Details")
                        .HasColumnType("jsonb");

                    b.Property<string>("DeviceFingerprint")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EmailOrUsername")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("FailureReason")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSuccessful")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSuspicious")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LocationInfo")
                        .HasColumnType("jsonb");

                    b.Property<decimal>("RiskScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0.0m);

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TriggeredLockout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_UserLoginAttempts");

                    b.HasIndex("AttemptedAt")
                        .HasDatabaseName("IX_UserLoginAttempts_AttemptedAt");

                    b.HasIndex("EmailOrUsername")
                        .HasDatabaseName("IX_UserLoginAttempts_EmailOrUsername");

                    b.HasIndex("IpAddress")
                        .HasDatabaseName("IX_UserLoginAttempts_IpAddress");

                    b.HasIndex("IsSuccessful")
                        .HasDatabaseName("IX_UserLoginAttempts_IsSuccessful");

                    b.HasIndex("IsSuspicious")
                        .HasDatabaseName("IX_UserLoginAttempts_IsSuspicious");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserLoginAttempts_UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("IpAddress", "AttemptedAt")
                        .HasDatabaseName("IX_UserLoginAttempts_IpAddress_AttemptedAt");

                    b.HasIndex("UserId", "AttemptedAt")
                        .HasDatabaseName("IX_UserLoginAttempts_UserId_AttemptedAt");

                    b.ToTable("UserLoginAttempts", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserMfaAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Details")
                        .HasColumnType("jsonb");

                    b.Property<string>("DisabledReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationInfo")
                        .HasColumnType("jsonb");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("MfaSettingsId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("RiskScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("TriggeredAlert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_UserMfaAuditLogs");

                    b.HasIndex("Action")
                        .HasDatabaseName("idx_user_mfa_audit_logs_action");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsSuccess")
                        .HasDatabaseName("idx_user_mfa_audit_logs_is_success");

                    b.HasIndex("MfaSettingsId")
                        .HasDatabaseName("idx_user_mfa_audit_logs_mfa_settings_id");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("idx_user_mfa_audit_logs_session_id");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("idx_user_mfa_audit_logs_timestamp");

                    b.HasIndex("TriggeredAlert")
                        .HasDatabaseName("idx_user_mfa_audit_logs_triggered_alert");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_mfa_audit_logs_user_id");

                    b.HasIndex("UserId", "Timestamp")
                        .HasDatabaseName("idx_user_mfa_audit_logs_user_timestamp");

                    b.HasIndex("Action", "IsSuccess", "Timestamp")
                        .HasDatabaseName("idx_user_mfa_audit_logs_action_success_timestamp");

                    b.ToTable("UserMfaAuditLogs", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserMfaBackupCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodeHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GenerationBatchId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MfaSettingsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsedFromIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("UsedFromUserAgent")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_UserMfaBackupCodes");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("idx_user_mfa_backup_codes_expires_at");

                    b.HasIndex("GenerationBatchId")
                        .HasDatabaseName("idx_user_mfa_backup_codes_generation_batch_id");

                    b.HasIndex("IsUsed")
                        .HasDatabaseName("idx_user_mfa_backup_codes_is_used");

                    b.HasIndex("MfaSettingsId")
                        .HasDatabaseName("idx_user_mfa_backup_codes_mfa_settings_id");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_mfa_backup_codes_user_id");

                    b.ToTable("UserMfaBackupCodes", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserMfaSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BackupCodesRemaining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisabledReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("EnabledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EnforcementGracePeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsBackupCodesEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEmailOtpEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEnforced")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsTotpEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TotpSecretKey")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_UserMfaSettings");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsEnabled")
                        .HasDatabaseName("idx_user_mfa_settings_is_enabled");

                    b.HasIndex("IsEnforced")
                        .HasDatabaseName("idx_user_mfa_settings_is_enforced");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("uq_user_mfa_settings_user_id");

                    b.ToTable("UserMfaSettings", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserNotificationSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("DoNotDisturb")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<TimeOnly?>("DoNotDisturbEnd")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("DoNotDisturbStart")
                        .HasColumnType("time without time zone");

                    b.Property<bool>("EmailAccountUpdates")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("EmailEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("EmailMarketing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("EmailNewsletter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("EmailSecurityAlerts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("EmailSystemNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Frequency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("immediate");

                    b.Property<bool>("InAppAccountUpdates")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("InAppEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("InAppSecurityAlerts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("InAppSystemNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("PushAccountUpdates")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("PushEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("PushSecurityAlerts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("PushSystemNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("SmsAccountUpdates")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("SmsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("SmsSecurityAlerts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("SmsTwoFactorAuth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("TimeZone")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasDefaultValue("UTC");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_UserNotificationSettings");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_user_notification_settings_created_at");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmailEnabled")
                        .HasDatabaseName("idx_user_notification_settings_email_enabled");

                    b.HasIndex("InAppEnabled")
                        .HasDatabaseName("idx_user_notification_settings_inapp_enabled");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("idx_user_notification_settings_is_deleted");

                    b.HasIndex("PushEnabled")
                        .HasDatabaseName("idx_user_notification_settings_push_enabled");

                    b.HasIndex("SmsEnabled")
                        .HasDatabaseName("idx_user_notification_settings_sms_enabled");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("idx_user_notification_settings_user_id");

                    b.HasIndex("UserId1")
                        .IsUnique();

                    b.ToTable("UserNotificationSettings", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id")
                        .HasName("PK_UserPreferences");

                    b.HasIndex("Category")
                        .HasDatabaseName("idx_user_preferences_category");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_user_preferences_created_at");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_user_preferences_is_active");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("idx_user_preferences_is_deleted");

                    b.HasIndex("Key")
                        .HasDatabaseName("idx_user_preferences_key");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_preferences_user_id");

                    b.HasIndex("UserId", "Category")
                        .HasDatabaseName("idx_user_preferences_user_category");

                    b.HasIndex("UserId", "Key")
                        .IsUnique()
                        .HasDatabaseName("idx_user_preferences_user_key");

                    b.ToTable("UserPreferences", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Language")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("en");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Preferences")
                        .HasColumnType("jsonb");

                    b.Property<string>("Province")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TimeZone")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("UTC");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_UserProfiles");

                    b.HasIndex("City")
                        .HasDatabaseName("idx_user_profiles_city");

                    b.HasIndex("Country")
                        .HasDatabaseName("idx_user_profiles_country");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_user_profiles_created_at");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("idx_user_profiles_is_deleted");

                    b.HasIndex("Language")
                        .HasDatabaseName("idx_user_profiles_language");

                    b.HasIndex("PostalCode")
                        .HasDatabaseName("idx_user_profiles_postal_code");

                    b.HasIndex("TimeZone")
                        .HasDatabaseName("idx_user_profiles_timezone");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_profiles_user_id");

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_UserRoles");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_user_roles_created_at");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("idx_user_roles_expires_at");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("idx_user_roles_is_deleted");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("idx_user_roles_role_id");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_roles_user_id");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("idx_user_roles_user_role");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserSecuritySettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AdditionalSettings")
                        .HasColumnType("jsonb");

                    b.Property<bool>("AutoUnlockAfterLockoutPeriod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("BlockNewLocationLogins")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("EnableDeviceFingerprinting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("EnableGeolocationTracking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("EnableProgressiveLockout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("EnableSuspiciousActivityDetection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("FailedAttemptWindowMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<int>("InitialLockoutDurationMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(15);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsGlobalDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("LockoutDurationMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,1)")
                        .HasDefaultValue(2.0m);

                    b.Property<bool>("LogSecurityEvents")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxConcurrentSessions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5);

                    b.Property<int>("MaxFailedLoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5);

                    b.Property<int>("MaxLockoutDurationMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1440);

                    b.Property<bool>("RequireEmailVerificationForNewLocations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("SecurityLogRetentionDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(90);

                    b.Property<bool>("SendSecurityAlerts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("SessionTimeoutMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<decimal>("SuspiciousActivityThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0.7m);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_UserSecuritySettings");

                    b.HasIndex("IsGlobalDefault")
                        .HasDatabaseName("IX_UserSecuritySettings_IsGlobalDefault");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserSecuritySettings_UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserSecuritySettings", null, t =>
                        {
                            t.HasCheckConstraint("CK_UserSecuritySettings_InitialLockoutDurationMinutes", "\"InitialLockoutDurationMinutes\" > 0");

                            t.HasCheckConstraint("CK_UserSecuritySettings_LockoutDurationMultiplier", "\"LockoutDurationMultiplier\" >= 1.0");

                            t.HasCheckConstraint("CK_UserSecuritySettings_MaxConcurrentSessions", "\"MaxConcurrentSessions\" > 0");

                            t.HasCheckConstraint("CK_UserSecuritySettings_MaxFailedLoginAttempts", "\"MaxFailedLoginAttempts\" > 0");

                            t.HasCheckConstraint("CK_UserSecuritySettings_MaxLockoutDurationMinutes", "\"MaxLockoutDurationMinutes\" >= \"InitialLockoutDurationMinutes\"");

                            t.HasCheckConstraint("CK_UserSecuritySettings_SessionTimeoutMinutes", "\"SessionTimeoutMinutes\" > 0");

                            t.HasCheckConstraint("CK_UserSecuritySettings_SuspiciousActivityThreshold", "\"SuspiciousActivityThreshold\" >= 0.0 AND \"SuspiciousActivityThreshold\" <= 1.0");
                        });
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Browser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OperatingSystem")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_UserSessions");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_user_sessions_created_at");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("idx_user_sessions_expires_at");

                    b.HasIndex("IpAddress")
                        .HasDatabaseName("idx_user_sessions_ip_address");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_user_sessions_is_active");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("idx_user_sessions_is_deleted");

                    b.HasIndex("LastAccessedAt")
                        .HasDatabaseName("idx_user_sessions_last_accessed_at");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasDatabaseName("idx_user_sessions_refresh_token");

                    b.HasIndex("SessionToken")
                        .IsUnique()
                        .HasDatabaseName("idx_user_sessions_session_token");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_sessions_user_id");

                    b.ToTable("UserSessions", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id")
                        .HasName("PK_UserTokens");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_user_tokens_created_at");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("idx_user_tokens_is_deleted");

                    b.HasIndex("LoginProvider")
                        .HasDatabaseName("idx_user_tokens_provider");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_user_tokens_name");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_tokens_user_id");

                    b.HasIndex("UserId", "LoginProvider", "Name")
                        .IsUnique()
                        .HasDatabaseName("idx_user_tokens_user_provider_name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.Role", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Roles_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Roles_UpdatedBy_Users_Id");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.RoleClaim", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_RoleClaims_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RoleClaims_Roles_RoleId");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_RoleClaims_UpdatedBy_Users_Id");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.User", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Users_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Users_UpdatedBy_Users_Id");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserActivityLog", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserActivityLogs_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserActivityLogs_UpdatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", "User")
                        .WithMany("UserActivityLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_UserActivityLogs_Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserApiKey", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserApiKeys_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserApiKeys_UpdatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", "User")
                        .WithMany("UserApiKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserApiKeys_Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserClaim", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserClaims_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserClaims_UpdatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserClaims_Users_UserId");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserConsent", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.UserConsent", "ParentConsent")
                        .WithMany("ChildConsents")
                        .HasForeignKey("ParentConsentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_UserConsents_ParentConsent");

                    b.HasOne("UserManagerServices.Domain.Entities.User", "User")
                        .WithMany("UserConsents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserConsents_Users_UserId");

                    b.Navigation("ParentConsent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserEmailOtp", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserEmailOtps_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserEmailOtps_UpdatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", "User")
                        .WithMany("UserEmailOtps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserEmailOtps_Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserLockoutHistory", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany("UserLockoutHistory")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserLogin", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserLogins_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserLogins_UpdatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserLogins_Users_UserId");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserLoginAttempt", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany("UserLoginAttempts")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserMfaAuditLog", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserMfaAuditLogs_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.UserMfaSettings", "MfaSettings")
                        .WithMany("AuditLogs")
                        .HasForeignKey("MfaSettingsId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserMfaAuditLogs_UserMfaSettings_MfaSettingsId");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserMfaAuditLogs_UpdatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", "User")
                        .WithMany("UserMfaAuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_UserMfaAuditLogs_Users_UserId");

                    b.Navigation("MfaSettings");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserMfaBackupCode", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserMfaBackupCodes_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.UserMfaSettings", "MfaSettings")
                        .WithMany("BackupCodes")
                        .HasForeignKey("MfaSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserMfaBackupCodes_UserMfaSettings_MfaSettingsId");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserMfaBackupCodes_UpdatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", "User")
                        .WithMany("UserMfaBackupCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserMfaBackupCodes_Users_UserId");

                    b.Navigation("MfaSettings");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserMfaSettings", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserMfaSettings_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserMfaSettings_UpdatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", "User")
                        .WithMany("UserMfaSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserMfaSettings_Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserNotificationSettings", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserNotificationSettings_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserNotificationSettings_UpdatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("UserManagerServices.Domain.Entities.UserNotificationSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserNotificationSettings_Users_UserId");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithOne("NotificationSettings")
                        .HasForeignKey("UserManagerServices.Domain.Entities.UserNotificationSettings", "UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserPreference", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserPreferences_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserPreferences_UpdatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", "User")
                        .WithMany("UserPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserPreferences_Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserProfiles_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserProfiles_UpdatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", "User")
                        .WithMany("UserProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserProfiles_Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserRoles_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Roles_RoleId");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserRoles_UpdatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Users_UserId");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserSecuritySettings", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany("UserSecuritySettings")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserSessions_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserSessions_UpdatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserSessions_Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserToken", b =>
                {
                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserTokens_CreatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserTokens_UpdatedBy_Users_Id");

                    b.HasOne("UserManagerServices.Domain.Entities.User", null)
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserTokens_Users_UserId");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.User", b =>
                {
                    b.Navigation("NotificationSettings");

                    b.Navigation("UserActivityLogs");

                    b.Navigation("UserApiKeys");

                    b.Navigation("UserClaims");

                    b.Navigation("UserConsents");

                    b.Navigation("UserEmailOtps");

                    b.Navigation("UserLockoutHistory");

                    b.Navigation("UserLoginAttempts");

                    b.Navigation("UserLogins");

                    b.Navigation("UserMfaAuditLogs");

                    b.Navigation("UserMfaBackupCodes");

                    b.Navigation("UserMfaSettings");

                    b.Navigation("UserPreferences");

                    b.Navigation("UserProfiles");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSecuritySettings");

                    b.Navigation("UserSessions");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserConsent", b =>
                {
                    b.Navigation("ChildConsents");
                });

            modelBuilder.Entity("UserManagerServices.Domain.Entities.UserMfaSettings", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("BackupCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
